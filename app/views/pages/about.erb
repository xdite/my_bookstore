<h2>本書由來</h2>

<p>第一次接觸到 Rails，大概是 2007 年的時候，Rails 版號是 1.2.6 。</p>

<p>當時我的職業還是系統工程師，晚上寫寫文章的 blogger。自高中起，我就知道如何使用 cgi / PHP 寫網頁，用 FreeBSD 架 BBS。腦袋裡鬼點子很多，但開發的速度永遠跟不上大腦奔馳的速度，寫出來的總是個半調子的成品。</p>

<p>開發速度永遠是澆熄寫網站熱情的殺手。接觸到 Rails，改變了我的世界。我從網路上買了一些書，開始學習刻出我第一個 Rails Site，為此當初薪水不高的我，還忍痛花了超過一個月的薪水買了台 MacBook，立志就是學會 Rails。Rails 對當時的我實在很不好上手，非常多隱藏的 Convention（一直到現在都是）。寫了很多很多的練習作業後，有一天因為朋友的一句玩笑話，還不是很熟 Rails 的我，花了兩個禮拜幹出了 VeryXD。這個網站 PV 曾經一度非常非常高。</p>

<p>那時候我開始知道，Rails 也許可以幫助我的雙手，跟上大腦的速度。</p>

<p>我後來辭去了非常穩定的工作，跑去當 Rails Developer。因為我真的很喜歡寫出會讓大家喜歡或眼睛為之一亮的網站。</p>

<p>外界對 Rails 的評價一向不好，討厭的原因不外是上手困難、不能照自己想要的方式寫程式（一堆隱藏 convention）、效率糟糕...</p>

<p>但坦白說，我一直認為那是因為大家不了解 Rails。真實的狀況是：只要衝過了第一道門檻，你多半就會開始後悔自己為什麼這麼晚才接觸它。這是個走在時代尖端、創造了非常多 web best practices 的 framework。跟著它的成長，我從中學習到幾乎無窮無盡的開發技巧以及在大公司才可能學會的 best practices。</p>

<p>Rails 的新手學習曲線過陡一直是國內這個社群長不太大的原因（沒有太多中文文件，唯一的幾本中文文件太快 expire）。在我一次生涯跑道的轉換，上司提出只要找得到接手我工作的 Rails Developer 就放我走的條件。坦白說，門檻很高 ....(笑）。因為 qualified 的 Rails developer 真的不多，不管國內國外都是一樣....</p>

<p>在找過幾位朋友談過接手都失敗的情形之下，最後心理作出了最壞的打算，了不起我自己培養。我開始回想當初是怎麼學習 Rails 的，我在作過大大小小這麼多 Rails Project 時踩過哪些最痛的雷？這些雷是不是對新手成長最痛的門檻？要是幫新手弭平這些門檻，是不是可以把長達一年的摸索期，砍到只剩短短的幾個禮拜。</p>

<p>最後，誕生了這份作業。</p>

<p>我使用這份作業的方式，是每天拆一個小作業，讓新手自己摸索一天，每天下班時，詢問是否踩雷，然後從踩雷除雷、Code Review，幫助新手了解 Rails 隱藏的 code convention，還有一些非常重要但書上不會特別強調，唯有實戰才會學到的技巧。</p>

<p>我用這份作業訓練出了很多個 Rails Developer，最長的一個只花了兩週就上手了（第一次寫練習作業的實驗對象 XD），短的一週之內就可以上 production 跟我一起作事了。</p>

<p>也許讀者會以為，要具備什麼特殊背景才能學這麼快。其實也沒有，Rails Developer 真的很難找！所以我其實真的收過兩個連 HTML 都不太會寫，只會寫 C 的 Programmer，將他們轉職成 Rails Developer。他們兩位現在 Rails 都寫得還不錯...</p>

<p>你也想學 Rails 嗎？我相信你也學得起來。</p>

<p>這份速成培養 Rails Developer 的作業的重點其實不在題目，而在每日的除雷解答與 Code Review。從完全都不懂的新手，憑空硬幹要把這份作業寫完，花的時間絕對會遠超過兩個禮拜。</p>

<p>（這是當初沒跟大家講的一個梗，奸笑）</p>

<p>無論如何，有些朋友盧我出來開課造福大家。</p>

<p>但...目前我真的沒空，我正在 run 一個我相當喜歡的事業，每天的心神都投在上面了。</p>

<p>唯一能想到的折衷點是，不如我重新寫過這一份作業，附上解答與講解，再次釋出。</p>

<p>這就是這本書的由來。</p>